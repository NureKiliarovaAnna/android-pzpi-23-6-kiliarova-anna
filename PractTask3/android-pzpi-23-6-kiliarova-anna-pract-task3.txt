Міністерство освіти і науки України
Харківський національний університет радіоелектроніки



Кафедра ПІ




Звіт
з практичної роботи №3
з дисципліни «Програмування під Android»
   





Виконала:                                                                          Перевірив:
ст. гр. ПЗПІ-23-6                        				ст. викладач кафедри ПІ
Кілярова А. П.						          Сокорчук І. П.








Харків 2024

ЗАВДАННЯ

     Ознайомитися з основними типами діалогових панелей в Android. Навчитися створювати та використовувати діалогові панелі в Android-застосунках. Засвоїти методи для налаштування діалогових панелей та їх взаємодії з користувачем. Засвоїти концепцію черги повідомлень (Message Queue) в Android. Вивчити роботу з обробником повідомлень (Handler) для взаємодії з потоками. Навчитися створювати та використовувати Handler для асинхронної обробки даних. Навчитися працювати із компонентом RecyclerView  для створення списків із прогортанням в Android, а також ознайомитися їх з принципами створення та використання адаптерів (Adapters) і керування даними у списках.


ХІД РОБОТИ

     Cтворюємо новий проєкт та обираємо Empty Views Activity.
     Діалогові панелі – це вікна, які з'являються на екрані поверх поточного інтерфейсу, щоб привернути увагу користувача або запросити в нього додаткові дії.
Типи діалогових панелей:
* AlertDialog: діалогове вікно з можливістю вибору між кількома варіантами або підтвердження певної дії.
* DatePickerDialog: для вибору дати.
* TimePickerDialog: для вибору часу.
* CustomDialog: діалог з власним дизайном.
     ProgressDialog діалог із прогресом.
     AlertDialog: додаємо кнопку для виклику діалогу:
1.<Button
2.    android:id="@+id/alert"
3.    android:layout_width="wrap_content"
4.    android:layout_height="wrap_content"
5.    android:text="Alert dialog"
6.    app:layout_constraintStart_toStartOf="parent"
7.    app:layout_constraintTop_toTopOf="parent"
8.    app:layout_constraintEnd_toEndOf="parent"/>

     Ініцалізуємо та підписуємо подію за допомогою setOnClickListener у MainActivity:
1. alert.setOnClickListener(v ->
2.        new AlertDialog.Builder(context)
3.                .setTitle("Alert dialog")
4.                .setMessage("Alert dialog test")
5.                .setPositiveButton("Ok", (dialog, which) -> {
6.                    Toast.makeText(context, "Alert dialog: okay", Toast.LENGTH_LONG).show();})
7.                .setNegativeButton("Cancel", ((dialog, which) -> {
8.                    Toast.makeText(context, "Alert dialog: cancel", Toast.LENGTH_LONG).show();
9.                }))
10.                .create()
11.                .show());

     ProgressDialog:
1.progress.setOnClickListener( v -> {
2.    ProgressDialog dialog = new ProgressDialog(context);
3.            dialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
4.            dialog.setMessage("In progress...");
5.            dialog.create();
6.            dialog.show();
7.        });

     DatePickerDialog. Аналогічно створюємо кнопку із id_date, ініціалізуємо та підписуємось на події із setOnClickListener із лямбдою. У виклику використовуємо допоміжний клас Calendar для визначення актуальної дати. Цей діалог дозволяє обрати дати у зручному вікні вибору, схожий на звичайний календар:
1.date.setOnClickListener(v -> {
2.            final Calendar calendar = Calendar.getInstance();
3.            new DatePickerDialog(context, (view, year, month, dayOfMonth) -> {
4.                Toast.makeText(context, String.format("year: %d, month: %d, day: %d", year, month, dayOfMonth), Toast.LENGTH_LONG).show();
5.            }, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH))
6.                    .show();
7.        });

     Переходимо до TimePickerDialog. Аналогічно створюємо кнопку із id time, ініціалізуємо та підписуємось на події із setOnClickListener із лямбдою. У виклику використовуємо допоміжний клас Calendar для визначення актуальної дати. Цей діалог дозволяє обрати час у зручному вікні вибору, схожий на звичайний годинник:
1.time.setOnClickListener(v -> {
2.    final Calendar calendar = Calendar.getInstance();
3.            new TimePickerDialog(context, (view, hourOfDay, minute) -> {
4.                Toast.makeText(context, String.format("hours: %d, minutes: %d", hourOfDay, minute), Toast.LENGTH_LONG).show();
5.            }, calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), true)
6.                    .show();
7.        });

     Після підтвердження вибору на викликаному діалогом view спливає повідомлення із обраним часом та датою.
     Далі по списку CustomDialog. Він відрізняється тим, що має особливий layout, що можна модифікувати самому. Cтворимо розмітку dialog_custom.xml, в який помістимо напис та дві кнопки для виходу із діалоги з позитивним та негативним результатами [ДОДАТОК А].
     Вказуємо, яку розмітку використовувати:
1.             dialog.setContentView(R.layout.dialog_custom);

     У коді описано створення та налаштування діалогу: його стиль та текстове наповнення.
     Перейдемо до Handlers. 
     Handler – це об’єкт, який дозволяє відправляти та обробляти повідомлення та виконувані об’єкти (Runnable) в потоці, пов’язаному з ним.
MessageQueue – черга, яка зберігає повідомлення та Runnable, що будуть оброблені об'єктом Handler.
     Looper – це механізм, що циклічно обробляє чергу повідомлень для потоку.
     Реалізація виконання деякої дії із затримкою на 5 секунд, що виконується після натискання кнопки із id «handler»:
1.findViewById(R.id.handler).setOnClickListener(v -> {
2.    new Handler(Looper.getMainLooper()).postDelayed(() -> {
3.        Toast.makeText(context, "2 seconds after", Toast.LENGTH_LONG).show();
4.    }, 2000);});

   Переходимо до роботи із RecyclerView.
   RecyclerView – основний контейнер для відображення списків або сіток елементів.
   LayoutManager – керує розташуванням елементів у списку (лінійний, сітковий або кастомний макети).
   Adapter – клас, який адаптує дані для відображення в RecyclerView.
   ViewHolder – зберігає посилання на елементи інтерфейсу для повторного використання.
   Додавання RecyclerView до файлу розмітки:
1.    <androidx.recyclerview.widget.RecyclerView
2.        android:id="@+id/list"
3.        android:layout_width="0dp"
4.        android:layout_height="0dp"
5.        tools:listitem="@layout/item"
6.        tools:itemCount="10"
7.        android:layout_marginStart="4dp"
8.        android:layout_marginEnd="4dp"
9.        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
10.        app:layout_constraintTop_toBottomOf="@id/handler"
11.        app:layout_constraintStart_toStartOf="parent"
12.        app:layout_constraintEnd_toEndOf="parent"
13.        app:layout_constraintBottom_toBottomOf="parent"/>

     В основному файлі коду генеруємо наповнення списку та викликаємо сам RecyclerView:
1.ArrayList<String> list = new ArrayList<>();
2.for(int i = 0; i < 100; i++) {
3.    list.add("ItemAdapter item with id: ");
4.}
5.
6.((RecyclerView) findViewById(R.id.list)).setAdapter(new ItemAdapter(list));

     В onCreateViewHolder зазначено тип view, за яким визнається яку саму розмітку програма буде використовувати у тому чи іншому випадку. Компоненти мають 2 рядки: id та напис [ДОДАТОК Б].


ВИСНОВКИ
     Під час практичної роботи було створено додаток для ознайомлення та опановування основних типів діалогових панелей та їхні атрибути налаштування; засвоєння концепції черги повідомлень, оброки подій Handler; навчання працювати із з компонентом RecyclerView для створення списків із прогортанням в Android та використання адаптерів (Adapters), керування даними у списках.
Відеозвіт на YouTube. URL: https://youtu.be/RWUDEogCw6M?si=wm00kLtcRD5bm_pk



ВИКОРИСТАНІ ДЖЕРЕЛА
1. Документація AndroidDevelopers dialogs. URL: https://developer.android.com/develop/ui/views/components/dialogs (дата звернення: 26.12.2024)
2. Документація AndroidDevelopers handlers. URL: https://developer.android.com/reference/android/os/Handler (дата звернення: 26.12.2024)
3. Документація AndroidDevelopers Recycler View. URL: https://developer.android.com/reference/androidx/recyclerview/widget/RecyclerView (дата звернення: 26.12.2024)



ДОДАТОК А
     Файл MainActivity.java (1)
import android.app.DatePickerDialog;
import android.content.DialogInterface;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

    @Override
    protected void onStart() {
        super.onStart();

        Button showDialogButton = findViewById(R.id.showDialogButton);
        showDialogButton.setOnClickListener(v -> new AlertDialog.Builder(MainActivity.this)
                .setTitle("Діалог")
                .setMessage("Це приклад AlertDialog.")
                .setPositiveButton("OK", (dialog, which) -> {
                    Toast.makeText(this, "Натиснуто ОК", Toast.LENGTH_SHORT).show();
                })
                .setNegativeButton("Cancel", (dialog, which) -> {
                    Toast.makeText(this, "Натиснуто Cancel", Toast.LENGTH_SHORT).show();
                })
                .show());

        Button showDatePickerButton = findViewById(R.id.showDatePickerButton);
        showDatePickerButton.setOnClickListener(v -> {
            DatePickerDialog datePickerDialog = new DatePickerDialog(MainActivity.this,
                    (view, year, month, dayOfMonth) -> {
                        Toast.makeText(
                                this,
                                "Обрано дату: " + dayOfMonth + "." + month + "." + year,
                                Toast.LENGTH_SHORT
                        ).show();
                    }, 2023, 8, 1);
            datePickerDialog.show();
        });

        Button showCustomDialogButton = findViewById(R.id.showCustomDialogButton);
        showCustomDialogButton.setOnClickListener(v -> {
            LayoutInflater inflater = getLayoutInflater();
            View dialogView = inflater.inflate(R.layout.custom_dialog, null);

            AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
            builder.setView(dialogView)
                    .setPositiveButton("OK", (dialog, id) -> {
                        Toast.makeText(MainActivity.this, "Натиснуто ОК", Toast.LENGTH_SHORT).show();
                    })
                    .setNegativeButton("Cancel", (dialog, id) -> {
                        Toast.makeText(MainActivity.this, "Натиснуто Cancel", Toast.LENGTH_SHORT).show();
                    });
            builder.create().show();
        });
    }
}
     Файл MainActivity.java (2)
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.os.Message;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

    @Override
    protected void onStart() {
        super.onStart();

        TextView textView = findViewById(R.id.handlerMessageTextView);
        Handler handler = new Handler(Looper.getMainLooper());

        Button startDelayedHandlerButton = findViewById(R.id.startDelayedHandlerButton);
        startDelayedHandlerButton.setOnClickListener(v -> {
            handler.postDelayed(() -> textView.setText("Handler executed after delay"), 2000);
        });

        Button startBackgroundThreadButton = findViewById(R.id.backgroundThreadHandlerButton);
        startBackgroundThreadButton.setOnClickListener(v -> new Thread(() -> {
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            handler.post(() -> textView.setText("Updated from background thread"));
        }).start());

        Button sendMessageWithHandlerButton = findViewById(R.id.sendMessageWithHandlerButton);
        sendMessageWithHandlerButton.setOnClickListener(v -> {
            Handler handler1 = new Handler(Looper.getMainLooper()) {
                @Override
                public void handleMessage(Message msg) {
                    textView.setText("Message received: " + msg.what);
                }
            };

            new Thread(() -> {
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                Message msg = handler1.obtainMessage();
                msg.what = 1;
                handler1.sendMessage(msg);
            }).start();

        });

        Button startHandlerThreadButton = findViewById(R.id.startHandlerThreadButton);
        startHandlerThreadButton.setOnClickListener(v -> {
            HandlerThread handlerThread = new HandlerThread("BackgroundThread");
            handlerThread.start();
            Handler backgroundHandler = new Handler(handlerThread.getLooper());

            backgroundHandler.post(() -> {
                try {
                    Thread.sleep(4000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                handler.post(() -> textView.setText("Updated from HandlerThread"));
            });
        });
    }
}
     Файл MainActivity.java (3)
import android.os.Bundle;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

    @Override
    protected void onStart() {
        super.onStart();

        RecyclerView recyclerView = findViewById(R.id.recyclerView);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        MyAdapter adapter = new MyAdapter(getDataSet());
        recyclerView.setAdapter(adapter);
    }

    private String[] getDataSet() {
        String[] dataSet = new String[100];
        for (int i = 0; i < dataSet.length; i++) {
            dataSet[i] = "String " + i;
        }
        return dataSet;
    }
}


ДОДАТОК Б
      Файл Item.xml
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".ItemAdapter">

    <TextView
        android:id="@+id/id"
        tools:text="10"
        android:layout_marginTop="16dp"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintBottom_toTopOf="@id/text"
        />

    <TextView
        android:id="@+id/text"
        tools:text="Item Id: 10"
        android:layout_marginBottom="16dp"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toBottomOf="@id/id"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        />

</androidx.constraintlayout.widget.ConstraintLayout>

2


