Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра ПІ


Звіт
з практичної роботи №2
з дисципліни «Програмування під Android»
   



Виконала:                                                                       Перевірив:
ст. гр. ПЗПІ-23-6                                                            ст. викладач кафедри ПІ
Кілярова А. П.				                          Сокорчук І. П.





Харків 2024
Завдання
1. Розмітка екрана
1.1. Підготовка робочого середовища
1.2. Практика з Linear/Constraint-Layout
1.3. Практика з атрибутами елементів
1.4. Обробка подій
2. Файли розмітки Layout
2.1. Створення різних Layout
2.2. Практика роботи з атрибутами
3. Життєвий цикл та методи Activity
3.1. Ознайомлення з життєвим циклом Activity
3.2. Дослідження методів життєвого циклу
3.3. Вивчення поведінки Activity при зміні орієнтації екрана
3.4. Практичне завдання з ручного збереження стану
3.5. Дослідження переходу між Activity
3.6. Обробка завершення Activity 
Хід роботи
1. Розмітка екрана
1.1 Підготовка робочого середовища
     Відкриваємо файл activity_main.xml та створюємо простий інтерфейс з використанням елементів, таких як TextView, Button та ImageView:
1.2 Практика з Linear/Constraint-Layout
     Створимо нову розмітку з використанням LinearLayout. В ній додамо декілька кнопок розташованих одне під одною.
     Для розмітки задамо атрибут android:orientation="vertical", для того щоб кнопки йшли у вертикальному порядку. Для кнопок задамо властивості layout_width та layout_height з значеннями wrap_content та match_parent.
1.3. Практика з атрибутами елементів
     Створимо макет з використанням різних елементів, використовуючи обмеження для позиціювання.
     Дослідимо атрибути, як padding, margin, gravity та layout_gravity для налаштування відступів та вирівнювання елементів, а також налаштуємо текстові поля (розмір шрифту, колір тощо)
1.4 Обробка подій кнопки
     Додамо до кнопки обробник подій. До кнопок додамо атрибути android:onClick="onTextUpdateClick" та android:onClick="onToastClick", а у коді реалізуємо відповідні методи, а саме:
1. public void onTextUpdateClick (View view) {
2.    textView.setText("Text has been updated!");
3. }
1. public void onToastClick(View view) {
2. Toast.makeText(this, "This is a toast message!", Toast.LENGTH_SHORT).show();
3. }

     Перший метод буде замінювати текст у TextView. А другий виводитиме повідомлення.
1.5 Завдання для самостійної роботи
	Створимо розмітку GridLayout та розмістимо у ній текстові поля, кнопки та зображення. Додамо кілька кнопок з різним функціоналом. Перша кнопка змінюватиме розмір тексу, а друга змінюватиме колір на червоний:

1. public void onAction1Click(View view) {
2.    labelText.setTextSize(isTextLarge ? 16 : 22);
3.    isTextLarge = !isTextLarge; 
4. }

1. public void onAction2Click(View view) {
2.    labelText.setTextColor(isTextRed ? Color.BLACK : Color.RED);
3.    isTextRed = !isTextRed;
4. }

2. Файли розмітки layout 
2.1 Створення різних Layout
     Створимо файл activity_main.xml, який містить структуру інтерфейсу користувача. У ньому використано ConstraintLayout як базовий контейнер, а для розміщення кнопок реалізовано GridLayout з кількома рядками та стовпцями.
2.2 Практика роботи за атрибутами
	Для кожного елемента (наприклад, `Button` і `TextView`) було налаштовано ключові атрибути.
	Ініціалізація елементів інтерфейсу:
1. TextView tvResult = findViewById(R.id.tvResult);
2. setButtonListeners();

	Обробка натискання кнопок:
1. View.OnClickListener numberClickListener = v -> {
2.    Button button = (Button) v;
3.    input.append(button.getText());
4.    tvResult.setText(input.toString());
5. };
     Логіка калькулятора:
1. private void calculateResult() {
2.    if (input.length() > 0 && !operator.isEmpty()) {
3.        double secondOperand = Double.parseDouble(input.toString());
4.        double result = 0;
5.        switch (operator) {
6.            case "+":
7.                result = firstOperand + secondOperand;
8.                break;
9.            case "-":
10.              result = firstOperand - secondOperand;
11.              break;
12.          case "*":
13.              result = firstOperand * secondOperand;
14.              break;
15.          case "/":
16.              if (secondOperand != 0) {
17.                result = firstOperand / secondOperand;
18.              } else {
19.                tvResult.setText("Error");
20.                return;
21.              }
22.              break;
23.      }
24.      tvResult.setText(String.valueOf(result));
25.      input.setLength(0);
26.      operator = "";
27.   }
28. }

3. Життєвий цикл та методи activity
3.1 Додайте до кожного методу життєвого циклу (onCreate, onStart, onResume тощо) функцію виведення повідомлень у лог (Log.d) для відстеження послідовності викликів. Приклад:
1. Log.d(TAG, "onStart: ");
3.2 Змініть орієнтацію пристрою (з портретної на ландшафтну) та спостерігайте за викликами методів життєвого циклу у логах.
3.3 Дослідіть, як зміна орієнтації перезапускає Activity (викликаються методи onPause(), onStop(), onDestroy(), а потім onCreate(), onStart(), onResume()).
3.4 Додайте в Activity поле для введення тексту (наприклад, EditText).
     При зміні орієнтації екрана текст у полі буде очищено, оскільки Activity перезавантажується.
     Було реалізовано збереження та відновлення вручну. Було створено клікер, що зберігає кількість кліків.
1.  public void onIncreaseCounter(View v) {
2.      TextView count = findViewById(R.id.count);
3.      Integer previousCounter = Integer.parseInt(count.getText().toString());
4.      Integer newValue = previousCounter + 1;
5.      count.setText(newValue.toString());
6.  }

Зберігається за допомогою:
1. protected void onSaveInstanceState(@NonNull Bundle outState) {
2.      TextView count = findViewById(R.id.count);
3.      outState.putString("counter", count.getText().toString());
4.      super.onSaveInstanceState(outState);

Відновлюється за допогою:
1.  protected void onRestoreInstanceState(@NonNull Bundle savedInstanceState){
2.      super.onRestoreInstanceState(savedInstanceState);
3.      TextView count = findViewById(R.id.count);
4.      count.setText(savedInstanceState.getString("counter"));
5.  }

     Створіть друге Activity у вашому застосунку. Додайте кнопку для переходу до другого Activity. Відстежте виклики методів життєвого циклу при переході між Activity. Додайте кнопку для завершення Activity (виклик методу finish()).
1. public void onFinishClick(View v) {
2.     finish();
3. }
 
4 Висновки
     Під час практичної роботи було досліджено: створення та налаштування різних розміток, використовуючи XML-файли. Виявлено, як компоненти та атрибути взаємодіють між собою. Ознайомилися із життєвим циклом компонентів Activity у застосунках Android. Навчилися керувати станами Activity через використання ключових методів життєвого циклу.
Відеозвіт на YouTube:
URL: https://youtu.be/Yu1e3WpDkv0?si=GDDybITKlFKqJCE5
Використані джерела
1.	Методичні вказівки до практичних занять: Розмітка екрана в Android. URL: https://dl.nure.ua/mod/page/view.php?id=599542 (дата звернення: 25.12.2024)
2.	Методичні вказівки до практичних занять: Файли розмітки Layout. URL: https://dl.nure.ua/mod/page/view.php?id=599543 (дата звернення: 25.12.2024)
3.	Методичні вказівки до практичного заняття: Життєвий цикл та методи Activity. URL: https://dl.nure.ua/mod/page/view.php?id=599544 (дата звернення: 25.12.2024)
       2
       
       
